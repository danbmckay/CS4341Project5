Daniel McKay
Manuel Gonsalves
CS 4341 Project 5 Report
How to run code:
./Project5.py [file name]
This will run out code with the given input file, and produce the desired output, and some .txt files so you can see how
the algorithms came to the answers they did with their given heuristics. you'll notice in the output it does not expressly show
when it back tracks but from looking at the current state you should be able to tell when it does backtrack

Approach:
The way that we worked through this project was by making everything an object that kept track of certain things
so Bags would be created and store how much weight they could carry, their letter and what items they currently had
items would be created and store what they weighed, their letter, the number of constraints they were involved in and whether
or not they had already been placed into a bag
Then every constraint would be an object as well with the specific bags and or items were involved with them
with the bags and items storing all the information it was very easy to check if a constraint was violated by passing the bags and items
to each specific constraint and see if the constraint had been met
the first step to solving the problem was to get backtracking working. the way we implemented back tracking was through
recursion. we would take the first item we could grab and put it in the first bag that it could go into. When we came to an item
that couldn't be placed we recorded what the previous state looked like so we wouldn't duplicate states and run into the same
problems then went back up one step and choose the next item in the list. After backtracking was done we added the MRV heuristic
and the degree heuristic for a tie break. The MRV heuristic chooses the item with the least amount of possible places it can go
and places it into the first bag that it can put it into.

failures = previous states that did not work
constraints = all the constraints on the csp
bags = the current bag objects
items = the current items
a_file = the file recording the solution
Backtracking(failures, constraints, bags, items, a_file):
    check if all final_constraints are met, the bag weights are met, and that every item is in a bag
    if met:
        an answer was found and returns it
    if its not met:
        for(i, still_unassigned_items)
            is_assigned = select_item(a_heuristic) // chooses some item to put in a bag based on the heuristic chosen updates bags and items
            // select_item will return true if it placed an item or false if it failed to
            if is_assigned:
                some_result = BackTracking(failures, constraints, bags, items, a_file) // works so far try another layer
                //some_result returns either the array of correct answers or False if it failed there
                if some_result:
                    return some_result
                else:
                    remove the item from the bag and try again with another one
            else:
                failures.append(current_state)
                return False

        failures.append(current_state)
        return False

A heuristic we implemented was the Least Constraining Values(LCV) heuristic. It picks the first item not already in a bag and tries to put it
in a bag. It decides this by putting the item in one bag, and checking the total remaining possible values for each other item, and chooses
the bag that maximizes the remaining possible values for the other items, assuming that solution is admissible. An item checks its remaining values
by trying to put itself in every bag, and checking if putting itself in that bag doesn't violate the weight limit/ any constraints.

Tests:
see out_put for how long each heuristic took to complete

Strengths/Weaknesses:
The strengths of our project is that the Min Remaining Values heuristic works very well, and finds solutions to all the given inputs very quickly. However, a
weakness of our program is the LCV heuristic. The heuristic works for most of the inputs, however for some of the more complex inputs it
seems to get stuck and will eventually error out.

Comparison with various algorithms:
Total amount of consistancy checks:
Input	Backtracking(uninformed)	MRT + degree	LCV
Input1  3							4				3
Input2	8							14				12
Input7  15							31				38
Input10 148							110				80
Input17 67							90				67

Total time taken to run the algorithms (seconds):
Input	Backtracking(uninformed)	MRT + degree	LCV
Input1  6.06 * 10^-5		        4.68 * 10^-5    3.65 * 10^-5
Input2	0.00014                     0.00014         0.00014
Input7  0.00011                     0.00018         0.00022
Input10 0.00369                     0.00028         0.00075
Input17 0.00055                     0.00025         0.00021

Based on the given results, the MRT is the best algorithm. While backtracking tends to have less consistency checks, it is by far the slowest algorithm of the three.
Comparing MRT and LCV, MRT has more consistency checks, but is faster most of the time, and by a greater margin than when LCV is faster.